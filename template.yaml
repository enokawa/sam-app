AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-cicd-sample

Globals:
  Function:
    Timeout: 3

Parameters:
  Environment:
    Type: String
    Default: dev
  GitHubOrg:
    Type: String
    Default: "enokawa"
  RepositoryName:
    Type: String
    Default: "sam-cicd-sample"
  OIDCProviderArn:
    Type: String
    Default: ""

Conditions:
  CreateOIDCProvider: !Equals
    - !Ref OIDCProviderArn
    - ""

Resources:
  OidcProvider: # https://github.com/aws-actions/configure-aws-credentials#sample-iam-role-cloudformation-template
    Type: AWS::IAM::OIDCProvider
    Properties:
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1
      Url: https://token.actions.githubusercontent.com
  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-OIDCRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !If
                - CreateOIDCProvider
                - !Ref OidcProvider
                - !Ref OIDCProviderArn
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrg}/${RepositoryName}:*
      Policies:
        - PolicyName: !Sub "${Environment}-SAMDeployPolicy"
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - cloudformation:CreateStack
                    - cloudformation:CreateChangeSet
                    - cloudformation:ExecuteChangeSet
                    - cloudformation:Describe*
                    - cloudformation:Get*
                    - cloudformation:ValidateTemplate
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - iam:Get*
                    - iam:List*
                    - iam:CreateRole
                    - iam:UpdateRole
                    - iam:UpdateRoleDescription
                    - iam:CreatePolicy
                    - iam:PutRolePolicy
                    - iam:UpdateAssumeRolePolicy
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - apigateway:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - lambda:List*
                    - lambda:Get*
                    - lambda:Create*
                    - lambda:Publish*
                    - lambda:Put*
                    - lambda:Update*
                    - lambda:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - logs:Describe*
                    - logs:List*
                    - logs:Create*
                    - logs:Put*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: "*"
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      EndpointConfiguration:
        Type: REGIONAL
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HelloWorldFunction}"
      RetentionInDays: 1
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-HelloWorld"
      CodeUri: hello_world/
      Handler: app.handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref Api

Outputs:
  Api:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Join
      - ''
      - - https://
        - !Ref Api
        - !Sub .execute-api.${AWS::Region}.amazonaws.com
        - !Sub /${Environment}
        - /hello